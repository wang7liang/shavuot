/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ws.shavuot.thrift.workflow;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-13")
public class ReturnStruct implements org.apache.thrift.TBase<ReturnStruct, ReturnStruct._Fields>, java.io.Serializable, Cloneable, Comparable<ReturnStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReturnStruct");

  private static final org.apache.thrift.protocol.TField PROCESS_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("processInstanceId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TASK_STRUCT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("taskStructList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField IDENTITYLINK_STRUCT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("identitylinkStructList", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ReturnStructStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ReturnStructTupleSchemeFactory();

  public java.lang.String processInstanceId; // optional
  public java.util.List<TaskStruct> taskStructList; // optional
  public java.util.List<IdentitylinkStruct> identitylinkStructList; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROCESS_INSTANCE_ID((short)1, "processInstanceId"),
    TASK_STRUCT_LIST((short)2, "taskStructList"),
    IDENTITYLINK_STRUCT_LIST((short)3, "identitylinkStructList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROCESS_INSTANCE_ID
          return PROCESS_INSTANCE_ID;
        case 2: // TASK_STRUCT_LIST
          return TASK_STRUCT_LIST;
        case 3: // IDENTITYLINK_STRUCT_LIST
          return IDENTITYLINK_STRUCT_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.PROCESS_INSTANCE_ID,_Fields.TASK_STRUCT_LIST,_Fields.IDENTITYLINK_STRUCT_LIST};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROCESS_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("processInstanceId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_STRUCT_LIST, new org.apache.thrift.meta_data.FieldMetaData("taskStructList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TaskStruct.class))));
    tmpMap.put(_Fields.IDENTITYLINK_STRUCT_LIST, new org.apache.thrift.meta_data.FieldMetaData("identitylinkStructList", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IdentitylinkStruct.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReturnStruct.class, metaDataMap);
  }

  public ReturnStruct() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ReturnStruct(ReturnStruct other) {
    if (other.isSetProcessInstanceId()) {
      this.processInstanceId = other.processInstanceId;
    }
    if (other.isSetTaskStructList()) {
      java.util.List<TaskStruct> __this__taskStructList = new java.util.ArrayList<TaskStruct>(other.taskStructList.size());
      for (TaskStruct other_element : other.taskStructList) {
        __this__taskStructList.add(new TaskStruct(other_element));
      }
      this.taskStructList = __this__taskStructList;
    }
    if (other.isSetIdentitylinkStructList()) {
      java.util.List<IdentitylinkStruct> __this__identitylinkStructList = new java.util.ArrayList<IdentitylinkStruct>(other.identitylinkStructList.size());
      for (IdentitylinkStruct other_element : other.identitylinkStructList) {
        __this__identitylinkStructList.add(new IdentitylinkStruct(other_element));
      }
      this.identitylinkStructList = __this__identitylinkStructList;
    }
  }

  public ReturnStruct deepCopy() {
    return new ReturnStruct(this);
  }

  @Override
  public void clear() {
    this.processInstanceId = null;
    this.taskStructList = null;
    this.identitylinkStructList = null;
  }

  public java.lang.String getProcessInstanceId() {
    return this.processInstanceId;
  }

  public ReturnStruct setProcessInstanceId(java.lang.String processInstanceId) {
    this.processInstanceId = processInstanceId;
    return this;
  }

  public void unsetProcessInstanceId() {
    this.processInstanceId = null;
  }

  /** Returns true if field processInstanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessInstanceId() {
    return this.processInstanceId != null;
  }

  public void setProcessInstanceIdIsSet(boolean value) {
    if (!value) {
      this.processInstanceId = null;
    }
  }

  public int getTaskStructListSize() {
    return (this.taskStructList == null) ? 0 : this.taskStructList.size();
  }

  public java.util.Iterator<TaskStruct> getTaskStructListIterator() {
    return (this.taskStructList == null) ? null : this.taskStructList.iterator();
  }

  public void addToTaskStructList(TaskStruct elem) {
    if (this.taskStructList == null) {
      this.taskStructList = new java.util.ArrayList<TaskStruct>();
    }
    this.taskStructList.add(elem);
  }

  public java.util.List<TaskStruct> getTaskStructList() {
    return this.taskStructList;
  }

  public ReturnStruct setTaskStructList(java.util.List<TaskStruct> taskStructList) {
    this.taskStructList = taskStructList;
    return this;
  }

  public void unsetTaskStructList() {
    this.taskStructList = null;
  }

  /** Returns true if field taskStructList is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskStructList() {
    return this.taskStructList != null;
  }

  public void setTaskStructListIsSet(boolean value) {
    if (!value) {
      this.taskStructList = null;
    }
  }

  public int getIdentitylinkStructListSize() {
    return (this.identitylinkStructList == null) ? 0 : this.identitylinkStructList.size();
  }

  public java.util.Iterator<IdentitylinkStruct> getIdentitylinkStructListIterator() {
    return (this.identitylinkStructList == null) ? null : this.identitylinkStructList.iterator();
  }

  public void addToIdentitylinkStructList(IdentitylinkStruct elem) {
    if (this.identitylinkStructList == null) {
      this.identitylinkStructList = new java.util.ArrayList<IdentitylinkStruct>();
    }
    this.identitylinkStructList.add(elem);
  }

  public java.util.List<IdentitylinkStruct> getIdentitylinkStructList() {
    return this.identitylinkStructList;
  }

  public ReturnStruct setIdentitylinkStructList(java.util.List<IdentitylinkStruct> identitylinkStructList) {
    this.identitylinkStructList = identitylinkStructList;
    return this;
  }

  public void unsetIdentitylinkStructList() {
    this.identitylinkStructList = null;
  }

  /** Returns true if field identitylinkStructList is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentitylinkStructList() {
    return this.identitylinkStructList != null;
  }

  public void setIdentitylinkStructListIsSet(boolean value) {
    if (!value) {
      this.identitylinkStructList = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PROCESS_INSTANCE_ID:
      if (value == null) {
        unsetProcessInstanceId();
      } else {
        setProcessInstanceId((java.lang.String)value);
      }
      break;

    case TASK_STRUCT_LIST:
      if (value == null) {
        unsetTaskStructList();
      } else {
        setTaskStructList((java.util.List<TaskStruct>)value);
      }
      break;

    case IDENTITYLINK_STRUCT_LIST:
      if (value == null) {
        unsetIdentitylinkStructList();
      } else {
        setIdentitylinkStructList((java.util.List<IdentitylinkStruct>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PROCESS_INSTANCE_ID:
      return getProcessInstanceId();

    case TASK_STRUCT_LIST:
      return getTaskStructList();

    case IDENTITYLINK_STRUCT_LIST:
      return getIdentitylinkStructList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PROCESS_INSTANCE_ID:
      return isSetProcessInstanceId();
    case TASK_STRUCT_LIST:
      return isSetTaskStructList();
    case IDENTITYLINK_STRUCT_LIST:
      return isSetIdentitylinkStructList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ReturnStruct)
      return this.equals((ReturnStruct)that);
    return false;
  }

  public boolean equals(ReturnStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_processInstanceId = true && this.isSetProcessInstanceId();
    boolean that_present_processInstanceId = true && that.isSetProcessInstanceId();
    if (this_present_processInstanceId || that_present_processInstanceId) {
      if (!(this_present_processInstanceId && that_present_processInstanceId))
        return false;
      if (!this.processInstanceId.equals(that.processInstanceId))
        return false;
    }

    boolean this_present_taskStructList = true && this.isSetTaskStructList();
    boolean that_present_taskStructList = true && that.isSetTaskStructList();
    if (this_present_taskStructList || that_present_taskStructList) {
      if (!(this_present_taskStructList && that_present_taskStructList))
        return false;
      if (!this.taskStructList.equals(that.taskStructList))
        return false;
    }

    boolean this_present_identitylinkStructList = true && this.isSetIdentitylinkStructList();
    boolean that_present_identitylinkStructList = true && that.isSetIdentitylinkStructList();
    if (this_present_identitylinkStructList || that_present_identitylinkStructList) {
      if (!(this_present_identitylinkStructList && that_present_identitylinkStructList))
        return false;
      if (!this.identitylinkStructList.equals(that.identitylinkStructList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetProcessInstanceId()) ? 131071 : 524287);
    if (isSetProcessInstanceId())
      hashCode = hashCode * 8191 + processInstanceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTaskStructList()) ? 131071 : 524287);
    if (isSetTaskStructList())
      hashCode = hashCode * 8191 + taskStructList.hashCode();

    hashCode = hashCode * 8191 + ((isSetIdentitylinkStructList()) ? 131071 : 524287);
    if (isSetIdentitylinkStructList())
      hashCode = hashCode * 8191 + identitylinkStructList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ReturnStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetProcessInstanceId()).compareTo(other.isSetProcessInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processInstanceId, other.processInstanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTaskStructList()).compareTo(other.isSetTaskStructList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskStructList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskStructList, other.taskStructList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIdentitylinkStructList()).compareTo(other.isSetIdentitylinkStructList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentitylinkStructList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identitylinkStructList, other.identitylinkStructList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ReturnStruct(");
    boolean first = true;

    if (isSetProcessInstanceId()) {
      sb.append("processInstanceId:");
      if (this.processInstanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.processInstanceId);
      }
      first = false;
    }
    if (isSetTaskStructList()) {
      if (!first) sb.append(", ");
      sb.append("taskStructList:");
      if (this.taskStructList == null) {
        sb.append("null");
      } else {
        sb.append(this.taskStructList);
      }
      first = false;
    }
    if (isSetIdentitylinkStructList()) {
      if (!first) sb.append(", ");
      sb.append("identitylinkStructList:");
      if (this.identitylinkStructList == null) {
        sb.append("null");
      } else {
        sb.append(this.identitylinkStructList);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ReturnStructStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReturnStructStandardScheme getScheme() {
      return new ReturnStructStandardScheme();
    }
  }

  private static class ReturnStructStandardScheme extends org.apache.thrift.scheme.StandardScheme<ReturnStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ReturnStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROCESS_INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processInstanceId = iprot.readString();
              struct.setProcessInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TASK_STRUCT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list18 = iprot.readListBegin();
                struct.taskStructList = new java.util.ArrayList<TaskStruct>(_list18.size);
                TaskStruct _elem19;
                for (int _i20 = 0; _i20 < _list18.size; ++_i20)
                {
                  _elem19 = new TaskStruct();
                  _elem19.read(iprot);
                  struct.taskStructList.add(_elem19);
                }
                iprot.readListEnd();
              }
              struct.setTaskStructListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IDENTITYLINK_STRUCT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list21 = iprot.readListBegin();
                struct.identitylinkStructList = new java.util.ArrayList<IdentitylinkStruct>(_list21.size);
                IdentitylinkStruct _elem22;
                for (int _i23 = 0; _i23 < _list21.size; ++_i23)
                {
                  _elem22 = new IdentitylinkStruct();
                  _elem22.read(iprot);
                  struct.identitylinkStructList.add(_elem22);
                }
                iprot.readListEnd();
              }
              struct.setIdentitylinkStructListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ReturnStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.processInstanceId != null) {
        if (struct.isSetProcessInstanceId()) {
          oprot.writeFieldBegin(PROCESS_INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.processInstanceId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.taskStructList != null) {
        if (struct.isSetTaskStructList()) {
          oprot.writeFieldBegin(TASK_STRUCT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.taskStructList.size()));
            for (TaskStruct _iter24 : struct.taskStructList)
            {
              _iter24.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.identitylinkStructList != null) {
        if (struct.isSetIdentitylinkStructList()) {
          oprot.writeFieldBegin(IDENTITYLINK_STRUCT_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.identitylinkStructList.size()));
            for (IdentitylinkStruct _iter25 : struct.identitylinkStructList)
            {
              _iter25.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ReturnStructTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ReturnStructTupleScheme getScheme() {
      return new ReturnStructTupleScheme();
    }
  }

  private static class ReturnStructTupleScheme extends org.apache.thrift.scheme.TupleScheme<ReturnStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ReturnStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetProcessInstanceId()) {
        optionals.set(0);
      }
      if (struct.isSetTaskStructList()) {
        optionals.set(1);
      }
      if (struct.isSetIdentitylinkStructList()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetProcessInstanceId()) {
        oprot.writeString(struct.processInstanceId);
      }
      if (struct.isSetTaskStructList()) {
        {
          oprot.writeI32(struct.taskStructList.size());
          for (TaskStruct _iter26 : struct.taskStructList)
          {
            _iter26.write(oprot);
          }
        }
      }
      if (struct.isSetIdentitylinkStructList()) {
        {
          oprot.writeI32(struct.identitylinkStructList.size());
          for (IdentitylinkStruct _iter27 : struct.identitylinkStructList)
          {
            _iter27.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ReturnStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.processInstanceId = iprot.readString();
        struct.setProcessInstanceIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list28 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.taskStructList = new java.util.ArrayList<TaskStruct>(_list28.size);
          TaskStruct _elem29;
          for (int _i30 = 0; _i30 < _list28.size; ++_i30)
          {
            _elem29 = new TaskStruct();
            _elem29.read(iprot);
            struct.taskStructList.add(_elem29);
          }
        }
        struct.setTaskStructListIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.identitylinkStructList = new java.util.ArrayList<IdentitylinkStruct>(_list31.size);
          IdentitylinkStruct _elem32;
          for (int _i33 = 0; _i33 < _list31.size; ++_i33)
          {
            _elem32 = new IdentitylinkStruct();
            _elem32.read(iprot);
            struct.identitylinkStructList.add(_elem32);
          }
        }
        struct.setIdentitylinkStructListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

