/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ws.shavuot.thrift.workflow;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-13")
public class TaskStruct implements org.apache.thrift.TBase<TaskStruct, TaskStruct._Fields>, java.io.Serializable, Cloneable, Comparable<TaskStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TaskStruct");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EXECUTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("executionId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PROCESS_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("processInstanceId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PROCESS_DEFINITION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("processDefinitionId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TASK_DEFINITION_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("taskDefinitionKey", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("owner", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ASSIGNEE_FIELD_DESC = new org.apache.thrift.protocol.TField("assignee", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("priority", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField DUE_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("dueDate", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField PARENT_TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentTaskId", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField TENANT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tenantId", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField FORM_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("formKey", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField BUSINESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("businessKey", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TaskStructStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TaskStructTupleSchemeFactory();

  public java.lang.String id; // required
  public java.lang.String executionId; // required
  public java.lang.String processInstanceId; // required
  public java.lang.String processDefinitionId; // required
  public java.lang.String name; // required
  public java.lang.String description; // required
  public java.lang.String taskDefinitionKey; // required
  public java.lang.String owner; // required
  public java.lang.String assignee; // required
  public int priority; // required
  public long createTime; // required
  public long dueDate; // required
  public java.lang.String category; // required
  public java.lang.String parentTaskId; // required
  public java.lang.String tenantId; // required
  public java.lang.String formKey; // required
  public java.lang.String businessKey; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    EXECUTION_ID((short)2, "executionId"),
    PROCESS_INSTANCE_ID((short)3, "processInstanceId"),
    PROCESS_DEFINITION_ID((short)4, "processDefinitionId"),
    NAME((short)5, "name"),
    DESCRIPTION((short)6, "description"),
    TASK_DEFINITION_KEY((short)7, "taskDefinitionKey"),
    OWNER((short)8, "owner"),
    ASSIGNEE((short)9, "assignee"),
    PRIORITY((short)10, "priority"),
    CREATE_TIME((short)11, "createTime"),
    DUE_DATE((short)12, "dueDate"),
    CATEGORY((short)13, "category"),
    PARENT_TASK_ID((short)14, "parentTaskId"),
    TENANT_ID((short)15, "tenantId"),
    FORM_KEY((short)16, "formKey"),
    BUSINESS_KEY((short)17, "businessKey");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // EXECUTION_ID
          return EXECUTION_ID;
        case 3: // PROCESS_INSTANCE_ID
          return PROCESS_INSTANCE_ID;
        case 4: // PROCESS_DEFINITION_ID
          return PROCESS_DEFINITION_ID;
        case 5: // NAME
          return NAME;
        case 6: // DESCRIPTION
          return DESCRIPTION;
        case 7: // TASK_DEFINITION_KEY
          return TASK_DEFINITION_KEY;
        case 8: // OWNER
          return OWNER;
        case 9: // ASSIGNEE
          return ASSIGNEE;
        case 10: // PRIORITY
          return PRIORITY;
        case 11: // CREATE_TIME
          return CREATE_TIME;
        case 12: // DUE_DATE
          return DUE_DATE;
        case 13: // CATEGORY
          return CATEGORY;
        case 14: // PARENT_TASK_ID
          return PARENT_TASK_ID;
        case 15: // TENANT_ID
          return TENANT_ID;
        case 16: // FORM_KEY
          return FORM_KEY;
        case 17: // BUSINESS_KEY
          return BUSINESS_KEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRIORITY_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private static final int __DUEDATE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXECUTION_ID, new org.apache.thrift.meta_data.FieldMetaData("executionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROCESS_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("processInstanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PROCESS_DEFINITION_ID, new org.apache.thrift.meta_data.FieldMetaData("processDefinitionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TASK_DEFINITION_KEY, new org.apache.thrift.meta_data.FieldMetaData("taskDefinitionKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OWNER, new org.apache.thrift.meta_data.FieldMetaData("owner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ASSIGNEE, new org.apache.thrift.meta_data.FieldMetaData("assignee", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("priority", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.DUE_DATE, new org.apache.thrift.meta_data.FieldMetaData("dueDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "long")));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("parentTaskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TENANT_ID, new org.apache.thrift.meta_data.FieldMetaData("tenantId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FORM_KEY, new org.apache.thrift.meta_data.FieldMetaData("formKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("businessKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TaskStruct.class, metaDataMap);
  }

  public TaskStruct() {
  }

  public TaskStruct(
    java.lang.String id,
    java.lang.String executionId,
    java.lang.String processInstanceId,
    java.lang.String processDefinitionId,
    java.lang.String name,
    java.lang.String description,
    java.lang.String taskDefinitionKey,
    java.lang.String owner,
    java.lang.String assignee,
    int priority,
    long createTime,
    long dueDate,
    java.lang.String category,
    java.lang.String parentTaskId,
    java.lang.String tenantId,
    java.lang.String formKey,
    java.lang.String businessKey)
  {
    this();
    this.id = id;
    this.executionId = executionId;
    this.processInstanceId = processInstanceId;
    this.processDefinitionId = processDefinitionId;
    this.name = name;
    this.description = description;
    this.taskDefinitionKey = taskDefinitionKey;
    this.owner = owner;
    this.assignee = assignee;
    this.priority = priority;
    setPriorityIsSet(true);
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.dueDate = dueDate;
    setDueDateIsSet(true);
    this.category = category;
    this.parentTaskId = parentTaskId;
    this.tenantId = tenantId;
    this.formKey = formKey;
    this.businessKey = businessKey;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TaskStruct(TaskStruct other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetExecutionId()) {
      this.executionId = other.executionId;
    }
    if (other.isSetProcessInstanceId()) {
      this.processInstanceId = other.processInstanceId;
    }
    if (other.isSetProcessDefinitionId()) {
      this.processDefinitionId = other.processDefinitionId;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetTaskDefinitionKey()) {
      this.taskDefinitionKey = other.taskDefinitionKey;
    }
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    if (other.isSetAssignee()) {
      this.assignee = other.assignee;
    }
    this.priority = other.priority;
    this.createTime = other.createTime;
    this.dueDate = other.dueDate;
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    if (other.isSetParentTaskId()) {
      this.parentTaskId = other.parentTaskId;
    }
    if (other.isSetTenantId()) {
      this.tenantId = other.tenantId;
    }
    if (other.isSetFormKey()) {
      this.formKey = other.formKey;
    }
    if (other.isSetBusinessKey()) {
      this.businessKey = other.businessKey;
    }
  }

  public TaskStruct deepCopy() {
    return new TaskStruct(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.executionId = null;
    this.processInstanceId = null;
    this.processDefinitionId = null;
    this.name = null;
    this.description = null;
    this.taskDefinitionKey = null;
    this.owner = null;
    this.assignee = null;
    setPriorityIsSet(false);
    this.priority = 0;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setDueDateIsSet(false);
    this.dueDate = 0;
    this.category = null;
    this.parentTaskId = null;
    this.tenantId = null;
    this.formKey = null;
    this.businessKey = null;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public TaskStruct setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public java.lang.String getExecutionId() {
    return this.executionId;
  }

  public TaskStruct setExecutionId(java.lang.String executionId) {
    this.executionId = executionId;
    return this;
  }

  public void unsetExecutionId() {
    this.executionId = null;
  }

  /** Returns true if field executionId is set (has been assigned a value) and false otherwise */
  public boolean isSetExecutionId() {
    return this.executionId != null;
  }

  public void setExecutionIdIsSet(boolean value) {
    if (!value) {
      this.executionId = null;
    }
  }

  public java.lang.String getProcessInstanceId() {
    return this.processInstanceId;
  }

  public TaskStruct setProcessInstanceId(java.lang.String processInstanceId) {
    this.processInstanceId = processInstanceId;
    return this;
  }

  public void unsetProcessInstanceId() {
    this.processInstanceId = null;
  }

  /** Returns true if field processInstanceId is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessInstanceId() {
    return this.processInstanceId != null;
  }

  public void setProcessInstanceIdIsSet(boolean value) {
    if (!value) {
      this.processInstanceId = null;
    }
  }

  public java.lang.String getProcessDefinitionId() {
    return this.processDefinitionId;
  }

  public TaskStruct setProcessDefinitionId(java.lang.String processDefinitionId) {
    this.processDefinitionId = processDefinitionId;
    return this;
  }

  public void unsetProcessDefinitionId() {
    this.processDefinitionId = null;
  }

  /** Returns true if field processDefinitionId is set (has been assigned a value) and false otherwise */
  public boolean isSetProcessDefinitionId() {
    return this.processDefinitionId != null;
  }

  public void setProcessDefinitionIdIsSet(boolean value) {
    if (!value) {
      this.processDefinitionId = null;
    }
  }

  public java.lang.String getName() {
    return this.name;
  }

  public TaskStruct setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getDescription() {
    return this.description;
  }

  public TaskStruct setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public java.lang.String getTaskDefinitionKey() {
    return this.taskDefinitionKey;
  }

  public TaskStruct setTaskDefinitionKey(java.lang.String taskDefinitionKey) {
    this.taskDefinitionKey = taskDefinitionKey;
    return this;
  }

  public void unsetTaskDefinitionKey() {
    this.taskDefinitionKey = null;
  }

  /** Returns true if field taskDefinitionKey is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskDefinitionKey() {
    return this.taskDefinitionKey != null;
  }

  public void setTaskDefinitionKeyIsSet(boolean value) {
    if (!value) {
      this.taskDefinitionKey = null;
    }
  }

  public java.lang.String getOwner() {
    return this.owner;
  }

  public TaskStruct setOwner(java.lang.String owner) {
    this.owner = owner;
    return this;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  /** Returns true if field owner is set (has been assigned a value) and false otherwise */
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  public java.lang.String getAssignee() {
    return this.assignee;
  }

  public TaskStruct setAssignee(java.lang.String assignee) {
    this.assignee = assignee;
    return this;
  }

  public void unsetAssignee() {
    this.assignee = null;
  }

  /** Returns true if field assignee is set (has been assigned a value) and false otherwise */
  public boolean isSetAssignee() {
    return this.assignee != null;
  }

  public void setAssigneeIsSet(boolean value) {
    if (!value) {
      this.assignee = null;
    }
  }

  public int getPriority() {
    return this.priority;
  }

  public TaskStruct setPriority(int priority) {
    this.priority = priority;
    setPriorityIsSet(true);
    return this;
  }

  public void unsetPriority() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  /** Returns true if field priority is set (has been assigned a value) and false otherwise */
  public boolean isSetPriority() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIORITY_ISSET_ID);
  }

  public void setPriorityIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIORITY_ISSET_ID, value);
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public TaskStruct setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public long getDueDate() {
    return this.dueDate;
  }

  public TaskStruct setDueDate(long dueDate) {
    this.dueDate = dueDate;
    setDueDateIsSet(true);
    return this;
  }

  public void unsetDueDate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DUEDATE_ISSET_ID);
  }

  /** Returns true if field dueDate is set (has been assigned a value) and false otherwise */
  public boolean isSetDueDate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DUEDATE_ISSET_ID);
  }

  public void setDueDateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DUEDATE_ISSET_ID, value);
  }

  public java.lang.String getCategory() {
    return this.category;
  }

  public TaskStruct setCategory(java.lang.String category) {
    this.category = category;
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public java.lang.String getParentTaskId() {
    return this.parentTaskId;
  }

  public TaskStruct setParentTaskId(java.lang.String parentTaskId) {
    this.parentTaskId = parentTaskId;
    return this;
  }

  public void unsetParentTaskId() {
    this.parentTaskId = null;
  }

  /** Returns true if field parentTaskId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentTaskId() {
    return this.parentTaskId != null;
  }

  public void setParentTaskIdIsSet(boolean value) {
    if (!value) {
      this.parentTaskId = null;
    }
  }

  public java.lang.String getTenantId() {
    return this.tenantId;
  }

  public TaskStruct setTenantId(java.lang.String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  public void unsetTenantId() {
    this.tenantId = null;
  }

  /** Returns true if field tenantId is set (has been assigned a value) and false otherwise */
  public boolean isSetTenantId() {
    return this.tenantId != null;
  }

  public void setTenantIdIsSet(boolean value) {
    if (!value) {
      this.tenantId = null;
    }
  }

  public java.lang.String getFormKey() {
    return this.formKey;
  }

  public TaskStruct setFormKey(java.lang.String formKey) {
    this.formKey = formKey;
    return this;
  }

  public void unsetFormKey() {
    this.formKey = null;
  }

  /** Returns true if field formKey is set (has been assigned a value) and false otherwise */
  public boolean isSetFormKey() {
    return this.formKey != null;
  }

  public void setFormKeyIsSet(boolean value) {
    if (!value) {
      this.formKey = null;
    }
  }

  public java.lang.String getBusinessKey() {
    return this.businessKey;
  }

  public TaskStruct setBusinessKey(java.lang.String businessKey) {
    this.businessKey = businessKey;
    return this;
  }

  public void unsetBusinessKey() {
    this.businessKey = null;
  }

  /** Returns true if field businessKey is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessKey() {
    return this.businessKey != null;
  }

  public void setBusinessKeyIsSet(boolean value) {
    if (!value) {
      this.businessKey = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case EXECUTION_ID:
      if (value == null) {
        unsetExecutionId();
      } else {
        setExecutionId((java.lang.String)value);
      }
      break;

    case PROCESS_INSTANCE_ID:
      if (value == null) {
        unsetProcessInstanceId();
      } else {
        setProcessInstanceId((java.lang.String)value);
      }
      break;

    case PROCESS_DEFINITION_ID:
      if (value == null) {
        unsetProcessDefinitionId();
      } else {
        setProcessDefinitionId((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case TASK_DEFINITION_KEY:
      if (value == null) {
        unsetTaskDefinitionKey();
      } else {
        setTaskDefinitionKey((java.lang.String)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((java.lang.String)value);
      }
      break;

    case ASSIGNEE:
      if (value == null) {
        unsetAssignee();
      } else {
        setAssignee((java.lang.String)value);
      }
      break;

    case PRIORITY:
      if (value == null) {
        unsetPriority();
      } else {
        setPriority((java.lang.Integer)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((java.lang.Long)value);
      }
      break;

    case DUE_DATE:
      if (value == null) {
        unsetDueDate();
      } else {
        setDueDate((java.lang.Long)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((java.lang.String)value);
      }
      break;

    case PARENT_TASK_ID:
      if (value == null) {
        unsetParentTaskId();
      } else {
        setParentTaskId((java.lang.String)value);
      }
      break;

    case TENANT_ID:
      if (value == null) {
        unsetTenantId();
      } else {
        setTenantId((java.lang.String)value);
      }
      break;

    case FORM_KEY:
      if (value == null) {
        unsetFormKey();
      } else {
        setFormKey((java.lang.String)value);
      }
      break;

    case BUSINESS_KEY:
      if (value == null) {
        unsetBusinessKey();
      } else {
        setBusinessKey((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case EXECUTION_ID:
      return getExecutionId();

    case PROCESS_INSTANCE_ID:
      return getProcessInstanceId();

    case PROCESS_DEFINITION_ID:
      return getProcessDefinitionId();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case TASK_DEFINITION_KEY:
      return getTaskDefinitionKey();

    case OWNER:
      return getOwner();

    case ASSIGNEE:
      return getAssignee();

    case PRIORITY:
      return getPriority();

    case CREATE_TIME:
      return getCreateTime();

    case DUE_DATE:
      return getDueDate();

    case CATEGORY:
      return getCategory();

    case PARENT_TASK_ID:
      return getParentTaskId();

    case TENANT_ID:
      return getTenantId();

    case FORM_KEY:
      return getFormKey();

    case BUSINESS_KEY:
      return getBusinessKey();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case EXECUTION_ID:
      return isSetExecutionId();
    case PROCESS_INSTANCE_ID:
      return isSetProcessInstanceId();
    case PROCESS_DEFINITION_ID:
      return isSetProcessDefinitionId();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case TASK_DEFINITION_KEY:
      return isSetTaskDefinitionKey();
    case OWNER:
      return isSetOwner();
    case ASSIGNEE:
      return isSetAssignee();
    case PRIORITY:
      return isSetPriority();
    case CREATE_TIME:
      return isSetCreateTime();
    case DUE_DATE:
      return isSetDueDate();
    case CATEGORY:
      return isSetCategory();
    case PARENT_TASK_ID:
      return isSetParentTaskId();
    case TENANT_ID:
      return isSetTenantId();
    case FORM_KEY:
      return isSetFormKey();
    case BUSINESS_KEY:
      return isSetBusinessKey();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TaskStruct)
      return this.equals((TaskStruct)that);
    return false;
  }

  public boolean equals(TaskStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_executionId = true && this.isSetExecutionId();
    boolean that_present_executionId = true && that.isSetExecutionId();
    if (this_present_executionId || that_present_executionId) {
      if (!(this_present_executionId && that_present_executionId))
        return false;
      if (!this.executionId.equals(that.executionId))
        return false;
    }

    boolean this_present_processInstanceId = true && this.isSetProcessInstanceId();
    boolean that_present_processInstanceId = true && that.isSetProcessInstanceId();
    if (this_present_processInstanceId || that_present_processInstanceId) {
      if (!(this_present_processInstanceId && that_present_processInstanceId))
        return false;
      if (!this.processInstanceId.equals(that.processInstanceId))
        return false;
    }

    boolean this_present_processDefinitionId = true && this.isSetProcessDefinitionId();
    boolean that_present_processDefinitionId = true && that.isSetProcessDefinitionId();
    if (this_present_processDefinitionId || that_present_processDefinitionId) {
      if (!(this_present_processDefinitionId && that_present_processDefinitionId))
        return false;
      if (!this.processDefinitionId.equals(that.processDefinitionId))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_taskDefinitionKey = true && this.isSetTaskDefinitionKey();
    boolean that_present_taskDefinitionKey = true && that.isSetTaskDefinitionKey();
    if (this_present_taskDefinitionKey || that_present_taskDefinitionKey) {
      if (!(this_present_taskDefinitionKey && that_present_taskDefinitionKey))
        return false;
      if (!this.taskDefinitionKey.equals(that.taskDefinitionKey))
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_assignee = true && this.isSetAssignee();
    boolean that_present_assignee = true && that.isSetAssignee();
    if (this_present_assignee || that_present_assignee) {
      if (!(this_present_assignee && that_present_assignee))
        return false;
      if (!this.assignee.equals(that.assignee))
        return false;
    }

    boolean this_present_priority = true;
    boolean that_present_priority = true;
    if (this_present_priority || that_present_priority) {
      if (!(this_present_priority && that_present_priority))
        return false;
      if (this.priority != that.priority)
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_dueDate = true;
    boolean that_present_dueDate = true;
    if (this_present_dueDate || that_present_dueDate) {
      if (!(this_present_dueDate && that_present_dueDate))
        return false;
      if (this.dueDate != that.dueDate)
        return false;
    }

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_parentTaskId = true && this.isSetParentTaskId();
    boolean that_present_parentTaskId = true && that.isSetParentTaskId();
    if (this_present_parentTaskId || that_present_parentTaskId) {
      if (!(this_present_parentTaskId && that_present_parentTaskId))
        return false;
      if (!this.parentTaskId.equals(that.parentTaskId))
        return false;
    }

    boolean this_present_tenantId = true && this.isSetTenantId();
    boolean that_present_tenantId = true && that.isSetTenantId();
    if (this_present_tenantId || that_present_tenantId) {
      if (!(this_present_tenantId && that_present_tenantId))
        return false;
      if (!this.tenantId.equals(that.tenantId))
        return false;
    }

    boolean this_present_formKey = true && this.isSetFormKey();
    boolean that_present_formKey = true && that.isSetFormKey();
    if (this_present_formKey || that_present_formKey) {
      if (!(this_present_formKey && that_present_formKey))
        return false;
      if (!this.formKey.equals(that.formKey))
        return false;
    }

    boolean this_present_businessKey = true && this.isSetBusinessKey();
    boolean that_present_businessKey = true && that.isSetBusinessKey();
    if (this_present_businessKey || that_present_businessKey) {
      if (!(this_present_businessKey && that_present_businessKey))
        return false;
      if (!this.businessKey.equals(that.businessKey))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetExecutionId()) ? 131071 : 524287);
    if (isSetExecutionId())
      hashCode = hashCode * 8191 + executionId.hashCode();

    hashCode = hashCode * 8191 + ((isSetProcessInstanceId()) ? 131071 : 524287);
    if (isSetProcessInstanceId())
      hashCode = hashCode * 8191 + processInstanceId.hashCode();

    hashCode = hashCode * 8191 + ((isSetProcessDefinitionId()) ? 131071 : 524287);
    if (isSetProcessDefinitionId())
      hashCode = hashCode * 8191 + processDefinitionId.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetTaskDefinitionKey()) ? 131071 : 524287);
    if (isSetTaskDefinitionKey())
      hashCode = hashCode * 8191 + taskDefinitionKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetOwner()) ? 131071 : 524287);
    if (isSetOwner())
      hashCode = hashCode * 8191 + owner.hashCode();

    hashCode = hashCode * 8191 + ((isSetAssignee()) ? 131071 : 524287);
    if (isSetAssignee())
      hashCode = hashCode * 8191 + assignee.hashCode();

    hashCode = hashCode * 8191 + priority;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dueDate);

    hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
    if (isSetCategory())
      hashCode = hashCode * 8191 + category.hashCode();

    hashCode = hashCode * 8191 + ((isSetParentTaskId()) ? 131071 : 524287);
    if (isSetParentTaskId())
      hashCode = hashCode * 8191 + parentTaskId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTenantId()) ? 131071 : 524287);
    if (isSetTenantId())
      hashCode = hashCode * 8191 + tenantId.hashCode();

    hashCode = hashCode * 8191 + ((isSetFormKey()) ? 131071 : 524287);
    if (isSetFormKey())
      hashCode = hashCode * 8191 + formKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetBusinessKey()) ? 131071 : 524287);
    if (isSetBusinessKey())
      hashCode = hashCode * 8191 + businessKey.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TaskStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExecutionId()).compareTo(other.isSetExecutionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExecutionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.executionId, other.executionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProcessInstanceId()).compareTo(other.isSetProcessInstanceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessInstanceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processInstanceId, other.processInstanceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProcessDefinitionId()).compareTo(other.isSetProcessDefinitionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProcessDefinitionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.processDefinitionId, other.processDefinitionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTaskDefinitionKey()).compareTo(other.isSetTaskDefinitionKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskDefinitionKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskDefinitionKey, other.taskDefinitionKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOwner()).compareTo(other.isSetOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.owner, other.owner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAssignee()).compareTo(other.isSetAssignee());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssignee()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.assignee, other.assignee);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPriority()).compareTo(other.isSetPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.priority, other.priority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCreateTime()).compareTo(other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDueDate()).compareTo(other.isSetDueDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDueDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dueDate, other.dueDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParentTaskId()).compareTo(other.isSetParentTaskId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentTaskId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentTaskId, other.parentTaskId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTenantId()).compareTo(other.isSetTenantId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTenantId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tenantId, other.tenantId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFormKey()).compareTo(other.isSetFormKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFormKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.formKey, other.formKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBusinessKey()).compareTo(other.isSetBusinessKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessKey, other.businessKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TaskStruct(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("executionId:");
    if (this.executionId == null) {
      sb.append("null");
    } else {
      sb.append(this.executionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("processInstanceId:");
    if (this.processInstanceId == null) {
      sb.append("null");
    } else {
      sb.append(this.processInstanceId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("processDefinitionId:");
    if (this.processDefinitionId == null) {
      sb.append("null");
    } else {
      sb.append(this.processDefinitionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("taskDefinitionKey:");
    if (this.taskDefinitionKey == null) {
      sb.append("null");
    } else {
      sb.append(this.taskDefinitionKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("owner:");
    if (this.owner == null) {
      sb.append("null");
    } else {
      sb.append(this.owner);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("assignee:");
    if (this.assignee == null) {
      sb.append("null");
    } else {
      sb.append(this.assignee);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("priority:");
    sb.append(this.priority);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dueDate:");
    sb.append(this.dueDate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("category:");
    if (this.category == null) {
      sb.append("null");
    } else {
      sb.append(this.category);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentTaskId:");
    if (this.parentTaskId == null) {
      sb.append("null");
    } else {
      sb.append(this.parentTaskId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tenantId:");
    if (this.tenantId == null) {
      sb.append("null");
    } else {
      sb.append(this.tenantId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("formKey:");
    if (this.formKey == null) {
      sb.append("null");
    } else {
      sb.append(this.formKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("businessKey:");
    if (this.businessKey == null) {
      sb.append("null");
    } else {
      sb.append(this.businessKey);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TaskStructStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TaskStructStandardScheme getScheme() {
      return new TaskStructStandardScheme();
    }
  }

  private static class TaskStructStandardScheme extends org.apache.thrift.scheme.StandardScheme<TaskStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TaskStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXECUTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.executionId = iprot.readString();
              struct.setExecutionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PROCESS_INSTANCE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processInstanceId = iprot.readString();
              struct.setProcessInstanceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PROCESS_DEFINITION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.processDefinitionId = iprot.readString();
              struct.setProcessDefinitionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TASK_DEFINITION_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.taskDefinitionKey = iprot.readString();
              struct.setTaskDefinitionKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.owner = iprot.readString();
              struct.setOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ASSIGNEE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.assignee = iprot.readString();
              struct.setAssigneeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.priority = iprot.readI32();
              struct.setPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // DUE_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dueDate = iprot.readI64();
              struct.setDueDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.category = iprot.readString();
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // PARENT_TASK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.parentTaskId = iprot.readString();
              struct.setParentTaskIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // TENANT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tenantId = iprot.readString();
              struct.setTenantIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FORM_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.formKey = iprot.readString();
              struct.setFormKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // BUSINESS_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessKey = iprot.readString();
              struct.setBusinessKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TaskStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.executionId != null) {
        oprot.writeFieldBegin(EXECUTION_ID_FIELD_DESC);
        oprot.writeString(struct.executionId);
        oprot.writeFieldEnd();
      }
      if (struct.processInstanceId != null) {
        oprot.writeFieldBegin(PROCESS_INSTANCE_ID_FIELD_DESC);
        oprot.writeString(struct.processInstanceId);
        oprot.writeFieldEnd();
      }
      if (struct.processDefinitionId != null) {
        oprot.writeFieldBegin(PROCESS_DEFINITION_ID_FIELD_DESC);
        oprot.writeString(struct.processDefinitionId);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.taskDefinitionKey != null) {
        oprot.writeFieldBegin(TASK_DEFINITION_KEY_FIELD_DESC);
        oprot.writeString(struct.taskDefinitionKey);
        oprot.writeFieldEnd();
      }
      if (struct.owner != null) {
        oprot.writeFieldBegin(OWNER_FIELD_DESC);
        oprot.writeString(struct.owner);
        oprot.writeFieldEnd();
      }
      if (struct.assignee != null) {
        oprot.writeFieldBegin(ASSIGNEE_FIELD_DESC);
        oprot.writeString(struct.assignee);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRIORITY_FIELD_DESC);
      oprot.writeI32(struct.priority);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DUE_DATE_FIELD_DESC);
      oprot.writeI64(struct.dueDate);
      oprot.writeFieldEnd();
      if (struct.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeString(struct.category);
        oprot.writeFieldEnd();
      }
      if (struct.parentTaskId != null) {
        oprot.writeFieldBegin(PARENT_TASK_ID_FIELD_DESC);
        oprot.writeString(struct.parentTaskId);
        oprot.writeFieldEnd();
      }
      if (struct.tenantId != null) {
        oprot.writeFieldBegin(TENANT_ID_FIELD_DESC);
        oprot.writeString(struct.tenantId);
        oprot.writeFieldEnd();
      }
      if (struct.formKey != null) {
        oprot.writeFieldBegin(FORM_KEY_FIELD_DESC);
        oprot.writeString(struct.formKey);
        oprot.writeFieldEnd();
      }
      if (struct.businessKey != null) {
        oprot.writeFieldBegin(BUSINESS_KEY_FIELD_DESC);
        oprot.writeString(struct.businessKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TaskStructTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TaskStructTupleScheme getScheme() {
      return new TaskStructTupleScheme();
    }
  }

  private static class TaskStructTupleScheme extends org.apache.thrift.scheme.TupleScheme<TaskStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TaskStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetExecutionId()) {
        optionals.set(1);
      }
      if (struct.isSetProcessInstanceId()) {
        optionals.set(2);
      }
      if (struct.isSetProcessDefinitionId()) {
        optionals.set(3);
      }
      if (struct.isSetName()) {
        optionals.set(4);
      }
      if (struct.isSetDescription()) {
        optionals.set(5);
      }
      if (struct.isSetTaskDefinitionKey()) {
        optionals.set(6);
      }
      if (struct.isSetOwner()) {
        optionals.set(7);
      }
      if (struct.isSetAssignee()) {
        optionals.set(8);
      }
      if (struct.isSetPriority()) {
        optionals.set(9);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(10);
      }
      if (struct.isSetDueDate()) {
        optionals.set(11);
      }
      if (struct.isSetCategory()) {
        optionals.set(12);
      }
      if (struct.isSetParentTaskId()) {
        optionals.set(13);
      }
      if (struct.isSetTenantId()) {
        optionals.set(14);
      }
      if (struct.isSetFormKey()) {
        optionals.set(15);
      }
      if (struct.isSetBusinessKey()) {
        optionals.set(16);
      }
      oprot.writeBitSet(optionals, 17);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetExecutionId()) {
        oprot.writeString(struct.executionId);
      }
      if (struct.isSetProcessInstanceId()) {
        oprot.writeString(struct.processInstanceId);
      }
      if (struct.isSetProcessDefinitionId()) {
        oprot.writeString(struct.processDefinitionId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetTaskDefinitionKey()) {
        oprot.writeString(struct.taskDefinitionKey);
      }
      if (struct.isSetOwner()) {
        oprot.writeString(struct.owner);
      }
      if (struct.isSetAssignee()) {
        oprot.writeString(struct.assignee);
      }
      if (struct.isSetPriority()) {
        oprot.writeI32(struct.priority);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetDueDate()) {
        oprot.writeI64(struct.dueDate);
      }
      if (struct.isSetCategory()) {
        oprot.writeString(struct.category);
      }
      if (struct.isSetParentTaskId()) {
        oprot.writeString(struct.parentTaskId);
      }
      if (struct.isSetTenantId()) {
        oprot.writeString(struct.tenantId);
      }
      if (struct.isSetFormKey()) {
        oprot.writeString(struct.formKey);
      }
      if (struct.isSetBusinessKey()) {
        oprot.writeString(struct.businessKey);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TaskStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(17);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.executionId = iprot.readString();
        struct.setExecutionIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.processInstanceId = iprot.readString();
        struct.setProcessInstanceIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.processDefinitionId = iprot.readString();
        struct.setProcessDefinitionIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.taskDefinitionKey = iprot.readString();
        struct.setTaskDefinitionKeyIsSet(true);
      }
      if (incoming.get(7)) {
        struct.owner = iprot.readString();
        struct.setOwnerIsSet(true);
      }
      if (incoming.get(8)) {
        struct.assignee = iprot.readString();
        struct.setAssigneeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.priority = iprot.readI32();
        struct.setPriorityIsSet(true);
      }
      if (incoming.get(10)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.dueDate = iprot.readI64();
        struct.setDueDateIsSet(true);
      }
      if (incoming.get(12)) {
        struct.category = iprot.readString();
        struct.setCategoryIsSet(true);
      }
      if (incoming.get(13)) {
        struct.parentTaskId = iprot.readString();
        struct.setParentTaskIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.tenantId = iprot.readString();
        struct.setTenantIdIsSet(true);
      }
      if (incoming.get(15)) {
        struct.formKey = iprot.readString();
        struct.setFormKeyIsSet(true);
      }
      if (incoming.get(16)) {
        struct.businessKey = iprot.readString();
        struct.setBusinessKeyIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

