/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.ws.shavuot.thrift.workflow;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-04-13")
public class StartProcessStruct implements org.apache.thrift.TBase<StartProcessStruct, StartProcessStruct._Fields>, java.io.Serializable, Cloneable, Comparable<StartProcessStruct> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StartProcessStruct");

  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BUSINESS_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("businessKey", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VARIABLES_FIELD_DESC = new org.apache.thrift.protocol.TField("variables", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StartProcessStructStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StartProcessStructTupleSchemeFactory();

  public java.lang.String key; // required
  public java.lang.String userId; // optional
  public java.lang.String businessKey; // optional
  public java.util.Map<java.lang.String,java.lang.String> variables; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    KEY((short)1, "key"),
    USER_ID((short)2, "userId"),
    BUSINESS_KEY((short)3, "businessKey"),
    VARIABLES((short)4, "variables");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEY
          return KEY;
        case 2: // USER_ID
          return USER_ID;
        case 3: // BUSINESS_KEY
          return BUSINESS_KEY;
        case 4: // VARIABLES
          return VARIABLES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.USER_ID,_Fields.BUSINESS_KEY,_Fields.VARIABLES};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BUSINESS_KEY, new org.apache.thrift.meta_data.FieldMetaData("businessKey", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VARIABLES, new org.apache.thrift.meta_data.FieldMetaData("variables", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StartProcessStruct.class, metaDataMap);
  }

  public StartProcessStruct() {
  }

  public StartProcessStruct(
    java.lang.String key)
  {
    this();
    this.key = key;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StartProcessStruct(StartProcessStruct other) {
    if (other.isSetKey()) {
      this.key = other.key;
    }
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetBusinessKey()) {
      this.businessKey = other.businessKey;
    }
    if (other.isSetVariables()) {
      java.util.Map<java.lang.String,java.lang.String> __this__variables = new java.util.HashMap<java.lang.String,java.lang.String>(other.variables);
      this.variables = __this__variables;
    }
  }

  public StartProcessStruct deepCopy() {
    return new StartProcessStruct(this);
  }

  @Override
  public void clear() {
    this.key = null;
    this.userId = null;
    this.businessKey = null;
    this.variables = null;
  }

  public java.lang.String getKey() {
    return this.key;
  }

  public StartProcessStruct setKey(java.lang.String key) {
    this.key = key;
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }

  public java.lang.String getUserId() {
    return this.userId;
  }

  public StartProcessStruct setUserId(java.lang.String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  public java.lang.String getBusinessKey() {
    return this.businessKey;
  }

  public StartProcessStruct setBusinessKey(java.lang.String businessKey) {
    this.businessKey = businessKey;
    return this;
  }

  public void unsetBusinessKey() {
    this.businessKey = null;
  }

  /** Returns true if field businessKey is set (has been assigned a value) and false otherwise */
  public boolean isSetBusinessKey() {
    return this.businessKey != null;
  }

  public void setBusinessKeyIsSet(boolean value) {
    if (!value) {
      this.businessKey = null;
    }
  }

  public int getVariablesSize() {
    return (this.variables == null) ? 0 : this.variables.size();
  }

  public void putToVariables(java.lang.String key, java.lang.String val) {
    if (this.variables == null) {
      this.variables = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.variables.put(key, val);
  }

  public java.util.Map<java.lang.String,java.lang.String> getVariables() {
    return this.variables;
  }

  public StartProcessStruct setVariables(java.util.Map<java.lang.String,java.lang.String> variables) {
    this.variables = variables;
    return this;
  }

  public void unsetVariables() {
    this.variables = null;
  }

  /** Returns true if field variables is set (has been assigned a value) and false otherwise */
  public boolean isSetVariables() {
    return this.variables != null;
  }

  public void setVariablesIsSet(boolean value) {
    if (!value) {
      this.variables = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((java.lang.String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((java.lang.String)value);
      }
      break;

    case BUSINESS_KEY:
      if (value == null) {
        unsetBusinessKey();
      } else {
        setBusinessKey((java.lang.String)value);
      }
      break;

    case VARIABLES:
      if (value == null) {
        unsetVariables();
      } else {
        setVariables((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case KEY:
      return getKey();

    case USER_ID:
      return getUserId();

    case BUSINESS_KEY:
      return getBusinessKey();

    case VARIABLES:
      return getVariables();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case KEY:
      return isSetKey();
    case USER_ID:
      return isSetUserId();
    case BUSINESS_KEY:
      return isSetBusinessKey();
    case VARIABLES:
      return isSetVariables();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof StartProcessStruct)
      return this.equals((StartProcessStruct)that);
    return false;
  }

  public boolean equals(StartProcessStruct that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_businessKey = true && this.isSetBusinessKey();
    boolean that_present_businessKey = true && that.isSetBusinessKey();
    if (this_present_businessKey || that_present_businessKey) {
      if (!(this_present_businessKey && that_present_businessKey))
        return false;
      if (!this.businessKey.equals(that.businessKey))
        return false;
    }

    boolean this_present_variables = true && this.isSetVariables();
    boolean that_present_variables = true && that.isSetVariables();
    if (this_present_variables || that_present_variables) {
      if (!(this_present_variables && that_present_variables))
        return false;
      if (!this.variables.equals(that.variables))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetKey()) ? 131071 : 524287);
    if (isSetKey())
      hashCode = hashCode * 8191 + key.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
    if (isSetUserId())
      hashCode = hashCode * 8191 + userId.hashCode();

    hashCode = hashCode * 8191 + ((isSetBusinessKey()) ? 131071 : 524287);
    if (isSetBusinessKey())
      hashCode = hashCode * 8191 + businessKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetVariables()) ? 131071 : 524287);
    if (isSetVariables())
      hashCode = hashCode * 8191 + variables.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(StartProcessStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBusinessKey()).compareTo(other.isSetBusinessKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBusinessKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.businessKey, other.businessKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVariables()).compareTo(other.isSetVariables());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVariables()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.variables, other.variables);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StartProcessStruct(");
    boolean first = true;

    sb.append("key:");
    if (this.key == null) {
      sb.append("null");
    } else {
      sb.append(this.key);
    }
    first = false;
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
    }
    if (isSetBusinessKey()) {
      if (!first) sb.append(", ");
      sb.append("businessKey:");
      if (this.businessKey == null) {
        sb.append("null");
      } else {
        sb.append(this.businessKey);
      }
      first = false;
    }
    if (isSetVariables()) {
      if (!first) sb.append(", ");
      sb.append("variables:");
      if (this.variables == null) {
        sb.append("null");
      } else {
        sb.append(this.variables);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (key == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'key' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StartProcessStructStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StartProcessStructStandardScheme getScheme() {
      return new StartProcessStructStandardScheme();
    }
  }

  private static class StartProcessStructStandardScheme extends org.apache.thrift.scheme.StandardScheme<StartProcessStruct> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StartProcessStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key = iprot.readString();
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BUSINESS_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.businessKey = iprot.readString();
              struct.setBusinessKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VARIABLES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.variables = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                java.lang.String _key1;
                java.lang.String _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readString();
                  struct.variables.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setVariablesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StartProcessStruct struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(struct.key);
        oprot.writeFieldEnd();
      }
      if (struct.userId != null) {
        if (struct.isSetUserId()) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.businessKey != null) {
        if (struct.isSetBusinessKey()) {
          oprot.writeFieldBegin(BUSINESS_KEY_FIELD_DESC);
          oprot.writeString(struct.businessKey);
          oprot.writeFieldEnd();
        }
      }
      if (struct.variables != null) {
        if (struct.isSetVariables()) {
          oprot.writeFieldBegin(VARIABLES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.variables.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter4 : struct.variables.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StartProcessStructTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StartProcessStructTupleScheme getScheme() {
      return new StartProcessStructTupleScheme();
    }
  }

  private static class StartProcessStructTupleScheme extends org.apache.thrift.scheme.TupleScheme<StartProcessStruct> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StartProcessStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.key);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetBusinessKey()) {
        optionals.set(1);
      }
      if (struct.isSetVariables()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetBusinessKey()) {
        oprot.writeString(struct.businessKey);
      }
      if (struct.isSetVariables()) {
        {
          oprot.writeI32(struct.variables.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter5 : struct.variables.entrySet())
          {
            oprot.writeString(_iter5.getKey());
            oprot.writeString(_iter5.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StartProcessStruct struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.key = iprot.readString();
      struct.setKeyIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.businessKey = iprot.readString();
        struct.setBusinessKeyIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.variables = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map6.size);
          java.lang.String _key7;
          java.lang.String _val8;
          for (int _i9 = 0; _i9 < _map6.size; ++_i9)
          {
            _key7 = iprot.readString();
            _val8 = iprot.readString();
            struct.variables.put(_key7, _val8);
          }
        }
        struct.setVariablesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

